{
  "address": "0xA0BAe3aa8C18Ff955195f404b7c7c744bb3D0D14",
  "abi": [],
  "transactionHash": "0xcd5c29fbf1378fae35cc6a3fb71aa6a71256352d8867bac9f17a976bdecd07a2",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x41DD8Ea1fc8d83f8c4a20a5a6E57238c7F476C09",
    "contractAddress": "0xA0BAe3aa8C18Ff955195f404b7c7c744bb3D0D14",
    "transactionIndex": 0,
    "gasUsed": "72217",
    "logsBloom": "0x
    "blockHash": "0x5dd07f13c1b9cfe74380b4e4bf64dee31bfda7e62fa4dee6792fded57a372185",
    "transactionHash": "0xcd5c29fbf1378fae35cc6a3fb71aa6a71256352d8867bac9f17a976bdecd07a2",
    "logs": [],
    "blockNumber": 2237000,
    "cumulativeGasUsed": "72217",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9e87d06f898d050c7b38b99cb6cd4986",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/LibStorage.sol\":\"LibStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/*\\r\\ncannot hold state variables, fallback or payable functions also cannot be created inside\\r\\nthe library\\r\\n\\r\\nonly pure and view functions can be called from outside of the library\\r\\n\\r\\n*/\\r\\n\\r\\nlibrary Types {\\r\\n\\r\\n    struct TokenAmount {\\r\\n        IERC20 token;\\r\\n        uint112 amount;\\r\\n    }\\r\\n\\r\\n    //status of order. Only tracked on action from user/miners\\r\\n    enum OrderStatus {\\r\\n        UNDEFINED,\\r\\n        PENDING,\\r\\n        FILLED,\\r\\n        CANCELLED,\\r\\n        PENALIZED\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n\\r\\n        //trader that owns the order\\r\\n        address trader;\\r\\n\\r\\n        //the token we are taking as fee\\r\\n        IERC20 feeToken;\\r\\n\\r\\n        //eth price of fee token in 18-decimal units\\r\\n        uint feeTokenETHPrice;\\r\\n\\r\\n        //current price of ETH in USD units\\r\\n        uint ethUSDPrice;\\r\\n\\r\\n        //an estimate of gas to use to fill the order\\r\\n        uint gasEstimate;\\r\\n\\r\\n        //token being offered\\r\\n        TokenAmount input;\\r\\n\\r\\n        //token wanted\\r\\n        TokenAmount output;\\r\\n    }\\r\\n\\r\\n    //============== CONFIG STATE =============/\\r\\n    struct Config {\\r\\n        //dev team address (120b)\\r\\n        address devTeam;\\r\\n\\r\\n        //bps fee expressed as a whole number\\r\\n        uint128 minFee;\\r\\n\\r\\n        //penalty a user faces for removing assets or \\r\\n        //allowances before a trade\\r\\n        uint128 penaltyFee;\\r\\n\\r\\n        //number of blocks to lock stake and order cancellations\\r\\n        uint8 lockoutBlocks;\\r\\n    }\\r\\n\\r\\n    //============== ACCESS STATE =============/\\r\\n    //storage structure of access controls\\r\\n    struct AccessControl {\\r\\n        bool reentrantFlag;\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    //============== INITIALIZATION STATE =============/\\r\\n    struct InitControls {\\r\\n        bool initialized;\\r\\n        bool initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde3f80eb6bf222c11de220f4cce5c85b92910abb1b5e48510316b117ce86df3f\",\"license\":\"Unlicense\"},\"contracts/libs/LibStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../Types.sol\\\";\\r\\n\\r\\nlibrary LibStorage {\\r\\n\\r\\n    //keccak256(\\\"com.buidlhub.config.ConfigStorage\\\");\\r\\n    bytes32 constant CONFIG_STORAGE_KEY = 0xf5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b9;\\r\\n\\r\\n     //keccak256(\\\"com.buidlhub.access.AccessControls\\\");\\r\\n    bytes32 constant ACCESS_STORAGE_KEY = 0x3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e9;\\r\\n\\r\\n    //keccak256(\\\"com.buidlhub.init.InitControls\\\");\\r\\n    bytes32 constant INIT_STORAGE_KEY = 0xd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d4741;\\r\\n\\r\\n    //============= STORAGE ACCESSORS ==========/\\r\\n   \\r\\n    function getConfigStorage() internal pure returns (Types.Config storage cs) {\\r\\n        assembly { cs.slot := CONFIG_STORAGE_KEY }\\r\\n    }\\r\\n\\r\\n    function getAccessStorage() internal pure returns (Types.AccessControl storage acs) {\\r\\n        assembly { acs.slot := ACCESS_STORAGE_KEY }\\r\\n    }\\r\\n\\r\\n    function getInitControls() internal pure returns (Types.InitControls storage ic) {\\r\\n        assembly { ic.slot := INIT_STORAGE_KEY }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x45a4e0720873a370a89c4ecb36f8ac376907b572501ef12d40e5b4a23165b071\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d38ce308a2116dfe59c46cbbdc6216f93ac74c20418d4072ba5ed0f43fe49d2464736f6c63430008010033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d38ce308a2116dfe59c46cbbdc6216f93ac74c20418d4072ba5ed0f43fe49d2464736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}